SMART GRID COMMAND CENTER - PROJECT SUMMARY
=========================================

1. PROJECT OVERVIEW
------------------
The Smart Grid Command Center is a comprehensive system for load forecasting, renewable energy integration, and predictive maintenance in smart grid operations. The system combines machine learning models with real-time monitoring and optimization capabilities.

2. SYSTEM ARCHITECTURE
---------------------
The project consists of three main components:
- FastAPI Backend (app/main.py)
- Streamlit Dashboard (dashboard.py)
- Model Training Pipeline (scripts/train_model.py)

3. DATA SOURCES & FEATURES
-------------------------
Dataset: smart_grid_data.csv
Location: data/smart_grid_data.csv

Features used in models:
a) Load Forecasting Features:
   - hour
   - dayofweek
   - month
   - year
   - dayofyear
   - Temperature (°C)
   - Humidity (%)

b) Solar Forecasting Features:
   - hour
   - dayofweek
   - month
   - dayofyear

c) Price Forecasting Features:
   - hour
   - dayofweek
   - load_kw

d) Fault Prediction Features:
   - Voltage (V)
   - Current (A)
   - power_kw
   - Reactive Power (kVAR)
   - Power Factor
   - Temperature (°C)
   - voltage_fluctuation

4. MACHINE LEARNING MODELS
-------------------------
Location: app/models/

a) Load Forecaster (load_forecaster.pkl)
   - Type: XGBoost Regressor
   - Purpose: Predicts load demand for next 24 hours
   - Features: Time-based + Environmental
   - Evaluation: RMSE metric

b) Solar Forecaster (solar_forecaster.pkl)
   - Type: XGBoost Regressor
   - Purpose: Predicts solar generation
   - Features: Time-based only
   - Evaluation: RMSE metric

c) Price Forecaster (price_forecaster.pkl)
   - Type: XGBoost Regressor
   - Purpose: Predicts electricity prices
   - Features: Time-based + Load
   - Evaluation: RMSE metric

d) Fault Predictor (fault_predictor.pkl)
   - Type: XGBoost Classifier
   - Purpose: Predicts equipment faults
   - Features: System metrics
   - Evaluation: AUC-ROC metric

5. API ENDPOINTS
---------------
Base URL: http://localhost:8001

Main Endpoint: /api/v3/system-status
Response Model (SystemStatus):
{
    "timestamp": str,
    "forecasts": List[Forecast],
    "battery_schedule": List[BatteryAction],
    "maintenance_alerts": List[MaintenanceAlert],
    "system_health": float
}

6. DASHBOARD FEATURES
--------------------
The Streamlit dashboard (dashboard.py) provides:

a) Energy Flow & Economics Tab:
   - 24-hour load forecast visualization
   - Solar generation overlay
   - Price forecast
   - Battery optimization schedule
   - Key performance indicators
   - Smart charge plan

b) System Health & Reliability Tab:
   - Predictive maintenance alerts
   - System health score
   - Fault probability indicators
   - Component diagnostics

c) Data Explorer Tab:
   - Interactive data visualization
   - Custom metric selection
   - Time series analysis
   - What-if simulation placeholder

7. BATTERY OPTIMIZATION
----------------------
The system includes a battery optimization algorithm that:
- Capacity: 500 kWh
- Max Charge Rate: 150 kW
- Max Discharge Rate: 150 kW
- Optimization Factors:
  * Price signals (charge during low prices)
  * Solar generation (absorb excess)
  * Load demand (discharge during peaks)

8. MAINTENANCE ALERTS
--------------------
The system generates maintenance alerts based on:
- Fault probability thresholds
- Priority levels (CRITICAL, HIGH)
- Evidence collection:
  * Voltage fluctuations
  * Temperature readings
  * Power factor
  * Current measurements

9. TECHNICAL STACK
-----------------
- Python 3.x
- FastAPI (Backend)
- Streamlit (Dashboard)
- XGBoost (ML Models)
- Pandas (Data Processing)
- Altair (Visualization)
- Plotly (Interactive Charts)

10. DEPENDENCIES
---------------
Key Python packages (requirements.txt):
- fastapi
- streamlit
- xgboost
- pandas
- numpy
- scikit-learn
- altair
- plotly
- uvicorn
- requests

11. SETUP & RUNNING
------------------
1. Create virtual environment:
   ```bash
   python -m venv .venv
   source .venv/bin/activate  # Linux/Mac
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Train models:
   ```bash
   python scripts/train_model.py
   ```

4. Start backend:
   ```bash
   uvicorn app.main:app --reload --port 8001
   ```

5. Start dashboard:
   ```bash
   streamlit run dashboard.py
   ```

12. FUTURE ENHANCEMENTS
----------------------
Planned improvements:
- Real-time component vitals monitoring
- Advanced what-if simulation capabilities
- Historical data analysis
- Cost optimization features
- Integration with external weather APIs
- Enhanced battery optimization algorithms
- User authentication and role-based access
- API documentation with Swagger UI

13. PROJECT STRUCTURE
--------------------
smart-grid-app/
├── app/
│   ├── __init__.py
│   ├── main.py              # FastAPI backend
│   └── models/              # Trained ML models
├── data/
│   └── smart_grid_data.csv  # Dataset
├── scripts/
│   └── train_model.py       # Model training
├── dashboard.py             # Streamlit frontend
├── requirements.txt         # Dependencies
└── README.md               # Project documentation

14. CONTACT & SUPPORT
--------------------
For issues, feature requests, or contributions:
- GitHub Repository: [Your Repository URL]
- Documentation: [Your Documentation URL]
- Support Email: [Your Support Email]

=========================================
Last Updated: [Current Date]
Version: 1.0.0 